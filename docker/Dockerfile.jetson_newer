FROM qutms_driverless_base:l4t-r35.3.1-opencv
# generated by jetson-containers

ARG ZED_ROS2_VERSION=foxy-humble-v4.0.5

# Docker config setup
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

WORKDIR /tmp

# ==============================================================================
#                           Set up a user using host UID
#    (this helps with file permissions when mounting folders into a container)
# ==============================================================================

ARG USERNAME
ARG HOST_UID
ARG HOST_GROUP=dialout

# create user and set no password required
RUN useradd \
        -r \
        -m \
        -d /home/${USERNAME}/ \
        -u ${HOST_UID} \
        -g ${HOST_GROUP} \
        -G sudo,video,audio \
        ${USERNAME} && \
    echo ${USERNAME}:${USERNAME} | chpasswd && \
    echo "${USERNAME} ALL=NOPASSWD: ALL" >> /etc/sudoers

RUN mkdir -p /home/${USERNAME}/driverless_ws

# ==============================================================================
#                          Download repos we use
# ==============================================================================

WORKDIR /home/${USERNAME}/driverless_ws

RUN git clone https://github.com/QUT-Motorsport/QUTMS_Driverless.git \
    --recurse-submodules

# zed-ros2 master @105354cc5a5a9a94e7b8db92b126eed3f247f308
RUN git clone https://github.com/stereolabs/zed-ros2-wrapper.git --recurse-submodules
WORKDIR /home/${USERNAME}/driverless_ws/zed-ros2-wrapper
RUN git fetch && git checkout 105354cc5a5a9a94e7b8db92b126eed3f247f308 && git submodule update --init

WORKDIR /home/${USERNAME}/driverless_ws

# ==============================================================================
#                          Install ROS 2 Dependencies
# ==============================================================================

ARG ROS_PACKAGE=ros_base
ARG ROS_VERSION=humble

ENV ROS_DISTRO=${ROS_VERSION}
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

WORKDIR /tmp

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

RUN echo "ROS2 builder => ROS_DISTRO=$ROS_DISTRO ROS_PACKAGE=$ROS_PACKAGE ROS_ROOT=$ROS_ROOT"

# add the ROS deb repo to the apt sources list
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    gnupg2 \
    lsb-release \
    ca-certificates

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update

# install development packages
RUN apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libbullet-dev \
    libpython3-dev \
    python3-colcon-common-extensions \
    python3-flake8 \
    python3-pip \
    python3-numpy \
    python3-pytest-cov \
    python3-rosdep \
    python3-setuptools \
    python3-vcstool \
    python3-rosinstall-generator \
    libasio-dev \
    libtinyxml2-dev \
    libcunit1-dev

# install some pip packages needed for testing
RUN pip3 install --upgrade --no-cache-dir \
    argcomplete \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures \
    pytest

# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed to build some of the ROS2 packages
# use pip to upgrade cmake instead because of kitware's rotating GPG keys:
# https://github.com/dusty-nv/jetson-containers/issues/216
RUN python3 -m pip install --upgrade pip
RUN pip3 install --no-cache-dir scikit-build && \
    pip3 install --upgrade --no-cache-dir --verbose cmake && \
    cmake --version && \
    which cmake

# remove other versions of Python3
# workaround for 'Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS Development'
RUN apt purge -y python3.9 libpython3.9* || echo "python3.9 not found, skipping removal" && \
    ls -ll /usr/bin/python*

# ==============================================================================
#                          Install and build ROS 2
# ==============================================================================

WORKDIR ${ROS_ROOT}

RUN mkdir -p ${ROS_ROOT}/src

RUN rosdep init && rosdep update

# skip installation of some conflicting packages
ARG SKIP_KEYS="libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv"
RUN echo "--skip-keys $SKIP_KEYS"

# https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249

# uses rosinstall generator to get dependencies from the driverless workspace src
# these are downloaded from ROS 2 git repos and placed into a 'requirements' folder
# in the ROS root to be installed and built from source
RUN rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PACKAGE} \
    `rosdep keys --ignore-src --rosdistro=${ROS_DISTRO} --from-paths \
        /home/${USERNAME}/driverless_ws/QUTMS_Driverless/src/perception/vision_pipeline \
        /home/${USERNAME}/driverless_ws/QUTMS_Driverless/src/common \
        /home/${USERNAME}/driverless_ws/zed-ros2-wrapper` \
    > ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall && \
    cat ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall && \
    vcs import src < ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall

# https://github.com/dusty-nv/jetson-containers/issues/181
RUN rm -r ${ROS_ROOT}/src/ament_cmake && \
    git -C ${ROS_ROOT}/src/ clone https://github.com/ament/ament_cmake -b ${ROS_DISTRO}

# apt and pip dependencies from the requirements are installed
# requirements are built from source into the ROS root
RUN rosdep update && \
    rosdep install -y \
        --rosdistro=${ROS_DISTRO} \
        --ignore-src \
        --from-paths src \
        --skip-keys "$SKIP_KEYS"

RUN colcon build \
        --merge-install \
        --cmake-args -DCMAKE_BUILD_TYPE=Release && \

    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean


ARG ONNXRUNTIME_VERSION=v1.16.1
ARG ONNXRUNTIME_FLAGS="--allow_running_as_root"
ARG CUDA_ARCHITECTURES=53;62;72;87

#ADD https://api.github.com/repos/microsoft/onnxruntime/git/refs/heads/${ONNXRUNTIME_VERSION} /tmp/onnxruntime_version.json

# https://onnxruntime.ai/docs/build/eps.html#nvidia-jetson-tx1tx2nanoxavier
# https://github.com/microsoft/onnxruntime/commit/b7b8b5b2ce80edb33990c7ae0fedac6ae3c623f4
RUN pip3 uninstall -y onnxruntime && \
    git clone https://github.com/microsoft/onnxruntime /tmp/onnxruntime && \
    cd /tmp/onnxruntime && \
    git checkout ${ONNXRUNTIME_VERSION} && \
    git submodule update --init --recursive && \
    sed -i 's|archive/3.4/eigen-3.4.zip;ee201b07085203ea7bd8eb97cbcb31b07cfa3efb|archive/3.4.0/eigen-3.4.0.zip;ef24286b7ece8737c99fa831b02941843546c081|' cmake/deps.txt || echo "cmake/deps.txt not found" && \
    ./build.sh --config Release --update --parallel --build --build_wheel \
        --skip_tests --skip_submodule_sync ${ONNXRUNTIME_FLAGS} \
        --cmake_extra_defines CMAKE_CXX_FLAGS="-Wno-unused-variable -I/usr/local/cuda/include" CMAKE_CUDA_ARCHITECTURES="${CUDA_ARCHITECTURES}" onnxruntime_BUILD_UNIT_TESTS=OFF \
        --cuda_home /usr/local/cuda --cudnn_home /usr/lib/$(uname -m)-linux-gnu \
        --use_tensorrt --tensorrt_home /usr/lib/$(uname -m)-linux-gnu && \
    cd build/Linux/Release && \
    make install && \
    cp dist/onnxruntime_gpu-*.whl /opt && \
    pip3 install --no-cache-dir --verbose /opt/onnxruntime_gpu-*.whl && \
    rm -rf /tmp/onnxruntime

# test import and print build info
RUN python3 -c 'import onnxruntime; print(onnxruntime.__version__);'

WORKDIR /home/${USERNAME}/driverless_ws

# remove driverless repo as deps have now been installed
RUN rm -rf QUTMS_Driverless

# copy zed depth model
COPY ./src/hardware/sensors/camera_files/* /usr/local/zed/resources/
# copy zed cam calibration file
COPY ./src/hardware/sensors/camera_files/SN33580719.conf /usr/local/zed/settings/SN33580719.conf

# install pip requirements
COPY ./src/machines/jetson_machine/requirements.txt /tmp/requirements.txt
RUN pip3 install -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt
# no deps as CV2 is already installed but compiled from source
RUN pip3 install ultralytics --no-deps

COPY --chown=${USERNAME}:${HOST_GROUP} ./src/ ./src

# build packages in the driverless workspace
RUN source ${ROS_ROOT}/install/setup.bash; \
    colcon build --symlink-install --packages-up-to jetson_machine --cmake-args \
    ' -DCMAKE_BUILD_TYPE=Release' ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64' \
    ' -DCUDA_CUDART_LIBRARY=/usr/local/cuda/lib64' ' -DCMAKE_CXX_FLAGS=-Wl,--allow-shlib-undefined' \
    ' --no-warn-unused-cli'

RUN echo "source /opt/ros/$ROS_DISTRO/install/setup.bash" >> /home/${USERNAME}/.bashrc
RUN echo "test -f /home/${USERNAME}/driverless_ws/install/setup.bash && source /home/${USERNAME}/driverless_ws/install/setup.bash" >> /home/${USERNAME}/.bashrc
COPY ./docker/ros_entrypoint.sh /ros_entrypoint.sh
ENTRYPOINT ["/ros_entrypoint.sh"]

RUN cp -f ./src/machines/jetson_machine/scripts/replace_for_tensor.py /usr/lib/python3.8/dist-packages/tensorrt/__init__.py

RUN rm -rf ./src

RUN chmod -R go=rwx /home/${USERNAME} && \
    chmod -R go=rwx /opt/ros/$ROS_DISTRO && \
    chmod -R go=rwx /usr/local/zed && \
    chmod -R go=rwx /usr/local/lib/python3.8/

# tell ROS to use Cyclone DDS
ENV RMW_IMPLEMENTATION="rmw_cyclonedds_cpp"
ENV CYCLONEDDS_URI=file:///home/developer/driverless_ws/src/machines/jetson_machine/cyclonedds.xml
ENV ROS_DOMAIN_ID=69
