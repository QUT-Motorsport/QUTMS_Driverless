/**: # stack-wide parameters
  ros__parameters:
    use_sim_time: False
    global_frame: track
    local_frame: odom
    robot_base_frame: base_footprint
    # robot_radius: 1.0
    footprint: "[ [1.7, 0.9], [1.7, -0.9], [-1.2, -0.9], [-1.2, 0.9] ]"

bt_navigator:
  ros__parameters:
    bt_loop_duration: 10
    default_server_timeout: 20
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # placeholder here as yaml gets re-written so these keys need to be active
    default_nav_to_pose_bt_xml: placeholder # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    default_nav_through_poses_bt_xml: placeholder # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    # - nav2_back_up_action_bt_node
    # - nav2_spin_action_bt_node
    # - nav2_wait_action_bt_node
    # - nav2_clear_costmap_service_bt_node
    # - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    # - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    # - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

behavior_server:
  ros__parameters:
    # local_costmap_topic: local_costmap/costmap_raw
    # global_costmap_topic: global_costmap/costmap_raw
    # local_footprint_topic: local_costmap/published_footprint
    # global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["drive_on_heading"]
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      resolution: 0.1
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 20.0
          raytrace_min_range: 0.0
          obstacle_max_range: 20.0
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.5
        inflation_radius: 3.0
      always_send_full_costmap: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 10.0
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.1
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 1.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.1
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 20.0
          raytrace_min_range: 0.0
          obstacle_max_range: 20.0
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["SmacPlannerHybrid"]
    SmacPlannerHybrid:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: -1                  # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 5000    # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 3.0              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
      cost_travel_multiplier: 1.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      minimum_turning_radius: 7.0         # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      # reverse_penalty: 2.1              # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 2.0          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 3.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.05        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      # rotation_penalty: 3.0             # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 40.0             # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      # allow_reverse_expansion: False    # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      debug_visualizations: False         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.5
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["RegulatedPurePursuit"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.01
      yaw_goal_tolerance: 0.01
    # Controller parameters
    RegulatedPurePursuit:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 5.0  # The desired maximum linear velocity to use.
      lookahead_dist: 4.0  # The lookahead distance to use to find the lookahead point.
      # min_lookahead_dist: 3.0  # The minimum lookahead distance threshold when using velocity scaled lookahead distances.
      # max_lookahead_dist: 5.0  # The maximum lookahead distance threshold when using velocity scaled lookahead distances.
      lookahead_time: 1.5  # The time to project the velocity by to find the velocity scaled lookahead distance. Also known as the lookahead gain.
      # rotate_to_heading_angular_vel: 1.8  # If rotate to heading is used, this is the angular velocity to use.
      transform_tolerance: 0.3  # The TF transform tolerance.
      use_velocity_scaled_lookahead_dist: false  # Whether to use the velocity scaled lookahead distances or constant lookahead_distance.
      min_approach_linear_velocity: 3.0  # The minimum velocity threshold to apply when approaching the goal.
      approach_velocity_scaling_dist: 1.0  # Integrated distance from end of transformed path at which to start applying velocity scaling.
      use_collision_detection: false  # Whether to enable collision detection.
      # max_allowed_time_to_collision_up_to_carrot: 2.0  # The time to project a velocity command to check for collisions when use_collision_detection is true.
      use_regulated_linear_velocity_scaling: false  # Whether to use the regulated features for curvature.
      use_cost_regulated_linear_velocity_scaling: false  # Whether to use the regulated features for proximity to obstacles.
      cost_scaling_dist: 1.0  # The minimum distance from an obstacle to trigger the scaling of linear velocity, if use_cost_regulated_linear_velocity_scaling is enabled.
      cost_scaling_gain: 1.0  # A multiplier gain, which should be <= 1.0, used to further scale the speed when an obstacle is within cost_scaling_dist.
      inflation_cost_scaling_factor: 0.5  # The value of cost_scaling_factor set for the inflation layer in the local costmap.
        # The value should be exactly the same for accurately computing distance from obstacles using the inflated cell values
      regulated_linear_scaling_min_radius: 0.9  # The turning radius for which the regulation features are triggered.
      regulated_linear_scaling_min_speed: 0.25  # The minimum speed for which the regulated features can send, to ensure process is still achievable even in high cost spaces with high curvature.
      use_fixed_curvature_lookahead: false  # Enable fixed lookahead for curvature detection. Useful for systems with long lookahead.
      curvature_lookahead_dist: 1.0  # Distance to lookahead to determine curvature for velocity regulation purposes if use_fixed_curvature_lookahead is enabled.
      use_rotate_to_heading: false  # Whether to enable rotating to rough heading and goal orientation when using holonomic planners.
      # rotate_to_heading_min_angle: 0.785  # The difference in the path orientation and the starting robot orientation to trigger a rotate in place, if use_rotate_to_heading is enabled.
      max_angular_accel: 6.0  # Maximum allowable angular acceleration while rotating to heading, if enabled.
      max_robot_pose_search_dist: 20.0  # Maximum integrated distance along the path to bound the search for the closest pose to the robot.
      use_interpolation: false  # Enables interpolation between poses on the path for lookahead point selection. Helps sparse paths to avoid inducing discontinuous commanded velocities.
